"use client";

import { useState, useRef } from "react";
import { motion, AnimatePresence } from "framer-motion";
import Image from "next/image";
import categoryProduct from "@/assets/Products/category-product.jpg";
import categoryProduct2 from "@/assets/Products/4094.jpg";
import { FaHeart, FaShoppingCart, FaRegHeart } from "react-icons/fa";

// Product data structure
interface Product {
  id: number;
  name: string;
  price: number;
  image: string;
  category: string;
  isWishlisted?: boolean;
}

const categories = [
  { name: "Sun Skin Crem" },
  { name: "SPF Sunscreens" },
  { name: "Face Sun Protection" },
  { name: "Body Sunscreen" },
  { name: "Moisturizing Sun Cream" },
];

// Sample product data
const products: Product[] = [
  { id: 1, name: "Premium Sunscreen SPF 50", price: 29.99, image: categoryProduct.src, category: "Sun Skin Crem", isWishlisted: false },
  { id: 2, name: "Face Protection Cream", price: 24.99, image: categoryProduct2.src, category: "Sun Skin Crem", isWishlisted: false },
  { id: 3, name: "Body Sunscreen Lotion", price: 19.99, image: categoryProduct.src, category: "SPF Sunscreens", isWishlisted: false },
  { id: 4, name: "Moisturizing Sun Cream", price: 34.99, image: categoryProduct2.src, category: "SPF Sunscreens", isWishlisted: false },
  { id: 5, name: "Daily Face Sunscreen", price: 27.99, image: categoryProduct.src, category: "Face Sun Protection", isWishlisted: false },
  { id: 6, name: "Sport Sunscreen SPF 70", price: 22.99, image: categoryProduct2.src, category: "Body Sunscreen", isWishlisted: false },
  { id: 7, name: "Hydrating Sun Cream", price: 31.99, image: categoryProduct.src, category: "Moisturizing Sun Cream", isWishlisted: false },
];

export default function CategorySection() {
  const [activeCategory, setActiveCategory] = useState("Sun Skin Crem");
  const [selectedImage, setSelectedImage] = useState(products[0].image);
  const [wishlistedItems, setWishlistedItems] = useState<number[]>([]);
  const scrollContainerRef = useRef<HTMLDivElement>(null);

  // Filter products by active category
  const categoryProducts = products.filter(product => product.category === activeCategory);
  const mainProduct = categoryProducts[0] || products[0];

  const handleCategoryClick = (categoryName: string, index: number) => {
    setActiveCategory(categoryName);
    if (categoryProducts.length > 0) {
      setSelectedImage(categoryProducts[0].image);
    }
  };

  const toggleWishlist = (productId: number, e: React.MouseEvent) => {
    e.stopPropagation();
    setWishlistedItems(prev => 
      prev.includes(productId) 
        ? prev.filter(id => id !== productId) 
        : [...prev, productId]
    );
  };

  const handleAddToCart = (product: Product, e: React.MouseEvent) => {
    e.stopPropagation();
    // Add to cart logic here
    console.log("Added to cart:", product);
  };

  // Product Card Component
  const ProductCard = ({ product, isMain = false }: { product: Product; isMain?: boolean }) => {
    const isWishlisted = wishlistedItems.includes(product.id);

    return (
      <div className="relative group overflow-hidden rounded-xl shadow-lg">
        <Image
          src={product.image}
          alt={product.name}
          width={isMain ? 900 : 300}
          height={isMain ? 600 : 200}
          className="w-full h-auto object-cover transition-transform duration-300 group-hover:scale-105"
        />
        
        {/* Black overlay with product info */}
        <div className="absolute inset-0 bg-gradient-to-t from-black/80 via-black/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex flex-col justify-end p-4">
          <div className="text-white">
            <h3 className="font-semibold text-sm md:text-base mb-1">{product.name}</h3>
            <p className="text-orange-400 font-bold text-sm md:text-lg mb-3">${product.price}</p>
            
            <div className="flex items-center justify-between">
              <button
                onClick={(e) => handleAddToCart(product, e)}
                className="flex items-center gap-2 bg-orange-500 hover:bg-orange-600 text-white px-3 py-2 rounded-lg text-xs md:text-sm transition-colors duration-200"
              >
                <FaShoppingCart className="text-xs" />
                Add to Cart
              </button>
              
              <button
                onClick={(e) => toggleWishlist(product.id, e)}
                className="p-2 bg-white/20 hover:bg-white/30 rounded-full transition-colors duration-200"
              >
                {isWishlisted ? (
                  <FaHeart className="text-red-500 text-sm md:text-base" />
                ) : (
                  <FaRegHeart className="text-white text-sm md:text-base" />
                )}
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  };

  return (
    <section className="container mx-auto px-4 py-8">
      {/* Heading */}
      <h2 className="text-2xl md:text-3xl font-bold text-orange-500 mb-6">
        Our Category
      </h2>

      {/* Scrollable Tabs */}
      <div className="relative mb-8">
        <div 
          ref={scrollContainerRef}
          className="flex overflow-x-auto pb-2 hide-scrollbar md:overflow-visible"
        >
          <div className="flex space-x-2 min-w-max md:min-w-0 bg-gray-50 dark:bg-gray-900 rounded-lg p-1 shadow-sm">
            {categories.map((cat, index) => (
              <button
                key={cat.name}
                onClick={(e) => {
                  handleCategoryClick(cat.name, index);
                  
                  // Scroll the button into view if it's partially visible
                  const button = e.currentTarget;
                  const buttonRect = button.getBoundingClientRect();

                  // Check if button is partially out of view on the right or left
                  const isPartiallyVisible = (
                    buttonRect.left >= 0 &&
                    buttonRect.right <= window.innerWidth
                  );

                  // If not fully visible, scroll it into view
                  if (!isPartiallyVisible) {
                    button.scrollIntoView({
                      behavior: 'smooth',
                      block: 'nearest',
                      inline: 'center'
                    });
                  }
                }}
                className={`flex-shrink-0 px-4 py-2 rounded-lg hover:cursor-pointer font-semibold transition-colors duration-200 ${
                  activeCategory === cat.name
                    ? "bg-orange-500 text-white"
                    : "text-gray-700 dark:text-gray-200 hover:text-orange-500 dark:hover:text-orange-400"
                }`}
              >
                {cat.name}
                {activeCategory === cat.name && (
                  <motion.div
                    layoutId="underline"
                    className="absolute left-0 -bottom-0.5 h-[2px] w-full bg-orange-500 rounded"
                  />
                )}
              </button>
            ))}
          </div>
        </div>
      </div>

      {/* Sub heading */}
      <h3 className="font-semibold text-lg mb-6 text-gray-800 dark:text-gray-200">
        {activeCategory}
      </h3>

      {/* Layout */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        {/* Main product image */}
        <div className="lg:col-span-2">
          <AnimatePresence mode="wait">
            <motion.div
              key={mainProduct.id}
              initial={{ opacity: 0, scale: 0.95 }}
              animate={{ opacity: 1, scale: 1 }}
              exit={{ opacity: 0, scale: 0.95 }}
              transition={{ duration: 0.4 }}
            >
              <ProductCard product={mainProduct} isMain={true} />
            </motion.div>
          </AnimatePresence>
        </div>

        {/* Side gallery */}
        <div className="grid grid-cols-2 gap-4">
          {categoryProducts.slice(1, 5).map((product) => (
            <motion.div
              key={product.id}
              whileHover={{ scale: 1.05 }}
              transition={{ type: "spring", stiffness: 300 }}
              className="cursor-pointer"
              onClick={() => setSelectedImage(product.image)}
            >
              <ProductCard product={product} />
            </motion.div>
          ))}
        </div>
      </div>

      {/* Add custom CSS for hide-scrollbar */}
      <style jsx>{`
        .hide-scrollbar {
          -ms-overflow-style: none;
          scrollbar-width: none;
        }
        .hide-scrollbar::-webkit-scrollbar {
          display: none;
        }
      `}</style>
    </section>
  );
}